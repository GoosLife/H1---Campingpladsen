using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace H1___Campingpladsen
{
    public enum StoredProcedures {
        GetSpots_SpotType_Price,
        GetSpotModel
    }

    public class DbController
    {
        public static string ConnectionString = "Server=localhost; Database=Campingpladsen; User Id=campingpladsen_rw; Password=Kode1234!";

        public static Spot GetSpot(int id)
        {
            Spot s = new Spot();

            using (SqlConnection con = new SqlConnection(ConnectionString))
            {
                using (SqlCommand cmd = new SqlCommand(StoredProcedures.GetSpotModel.ToString(), con)
                {
                    CommandType = System.Data.CommandType.StoredProcedure
                })
                {
                    cmd.Parameters.AddWithValue("@id", id);

                    con.Open();

                    SqlDataReader reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {
                        s = ReadSpot(reader);
                    }

                    con.Close();
                }
            }

            return s;
        }

        public static List<Spot> GetAllSpots()
        {
            List<Spot> spots = new List<Spot>();

            using (SqlConnection con = new SqlConnection(ConnectionString))
            {
                using (SqlCommand cmd = new SqlCommand(StoredProcedures.GetSpots_SpotType_Price.ToString(), con)
                {
                    CommandType = System.Data.CommandType.StoredProcedure
                })
                {
                    con.Open();

                    SqlDataReader reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {
                        //int id = (int)reader["id"];
                        //string name = (string)reader["spot_name"];
                        //string type = (string)reader["spot_type_name"];
                        //decimal pricePeakSeason = (decimal)reader["price_high"];
                        //decimal priceOffSeason = (decimal)reader["price_low"];

                        //Spot s = new Spot(id, name, type, pricePeakSeason, priceOffSeason);
                        Spot s = ReadSpot(reader);
                        spots.Add(s);
                    }

                    con.Close();
                }
            }

            return spots;
        }

        public static Spot ReadSpot(SqlDataReader reader)
        {
            int id = (int)reader["id"];
            string name = (string)reader["spot_name"];
            string type = (string)reader["spot_type_name"];
            decimal pricePeakSeason = (decimal)reader["price_high"];
            decimal priceOffSeason = (decimal)reader["price_low"];

            Spot s = new Spot(id, name, type, pricePeakSeason, priceOffSeason);

            return s;
        }

        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <param name="procedureToCall"></param>
        /// <returns>List of arrays containing the values of each row generated by the stored procedure.</returns>
        public static List<object[]> SelectByStoredProcedure(StoredProcedures procedureToCall)
        {
            List<object[]> allRows = new List<object[]>();

            using (SqlConnection con = new SqlConnection(ConnectionString))
                using (SqlCommand cmd = new SqlCommand(procedureToCall.ToString(), con)
                {
                    CommandType = System.Data.CommandType.StoredProcedure
                })
            {
                con.Open();

                SqlDataReader rdr = cmd.ExecuteReader();

                while (rdr.Read())
                {
                    object[] row = new object[rdr.FieldCount];
                    rdr.GetValues(row);

                    allRows.Add(row);
                }

                con.Close();
            }

            return allRows;
        }

        /// <summary>
        /// Select everything from the specified table.
        /// </summary>
        /// <param name="table"></param>
        /// <returns>Jagged array of the values that were read from the query.</returns>
        public static List<object[]> SelectAllFromTable(string table)
        {
            List<object[]> allRows = new List<object[]>(); // Used to store the results of the query

            string selectQuery = "SELECT * FROM " + table; // Select all query generated from generic "SELECT * FROM" statement, with the user specified table at the end

            SqlConnection con = new SqlConnection(ConnectionString); // Create new connection

            using (con)
            {
                SqlCommand cmd = new SqlCommand(selectQuery, con); // Create command based on the query + the established connection

                con.Open(); // Open the connection

                SqlDataReader rdr = cmd.ExecuteReader(); // Read the results of the query

                // Get results to jagged array
                int i = 0;

                while (rdr.Read())
                {
                    object[] row = new object[rdr.FieldCount];
                    rdr.GetValues(row); // Store all values from current row in array

                    allRows.Add(row); // Add array to jagged array
                    i++;
                }

                con.Close(); // Make sure connection is closed
            }

            return allRows; // Returns all the rows that were read
        }

        /// <summary>
        /// Get several specific values from a table.
        /// </summary>
        /// <param name="valuesToGet"></param>
        /// <param name="table"></param>
        /// <returns>List of arrays containing the values that were read from the query.</returns>
        public static List<object[]> SelectColumnsFromTable(string[] valuesToGet, string table)
        {
            List<object[]> allRows = new List<object[]>(); // Used to store the results of the query

            string selectQuery = "SELECT "; // Start of select query

            // Populate the select query with all the queried values
            for (int i = 0; i < valuesToGet.Length; i++)
            {
                selectQuery += valuesToGet[i];

                // Add trailing commas to every selected column, except the last
                if (i < valuesToGet.Length - 1)
                    selectQuery += ", ";
            }

            selectQuery += " FROM " + table; // Select query generated from "SELECT " [columns,...] " FROM" statement, with the user specified table at the end

            SqlConnection con = new SqlConnection(ConnectionString); // Create new connection

            using (con)
            {
                SqlCommand cmd = new SqlCommand(selectQuery, con); // Create command based on the query + the established connection

                con.Open(); // Open the connection

                SqlDataReader rdr = cmd.ExecuteReader(); // Read the results of the query

                // Get results to jagged array
                int i = 0;

                while (rdr.Read())
                {
                    object[] row = new object[rdr.FieldCount];
                    rdr.GetValues(row); // Store all values from current row in array

                    allRows.Add(row); // Add array to jagged array
                    i++;
                }

                con.Close(); // Make sure connection is closed
            }

            return allRows; // Returns all the rows that were read
        }

        /// <summary>
        /// Select a single column of values from
        /// </summary>
        /// <param name="valuesToGet"></param>
        /// <param name="table"></param>
        /// <returns>Jagged array of the values that were read from the query.</returns>
        public static List<object[]> SelectColumnFromTable(string valueToGet, string table)
        {
            List<object[]> allRows = new List<object[]>(); // Used to store the results of the query

            string selectQuery = "SELECT " + valueToGet + " FROM " + table; // Select query generated from "SELECT " [column] " FROM" statement, with the user specified table at the end

            SqlConnection con = new SqlConnection(ConnectionString); // Create new connection

            using (con)
            {
                SqlCommand cmd = new SqlCommand(selectQuery, con); // Create command based on the query + the established connection

                con.Open(); // Open the connection

                SqlDataReader rdr = cmd.ExecuteReader(); // Read the results of the query

                // Get results to jagged array
                int i = 0;

                while (rdr.Read())
                {
                    object[] row = new object[rdr.FieldCount];
                    rdr.GetValues(row); // Store all values from current row in array

                    allRows.Add(row); // Add array to jagged array
                    i++;
                }

                con.Close(); // Make sure connection is closed
            }

            return allRows; // Returns all the rows that were read
        }
    }
}